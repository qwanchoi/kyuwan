<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<bean id="customAccessDenied" class="co.qwan.home.security.CustomAccessDeniedHandler" />
	<bean id="customLoginSuccess" class="co.qwan.home.security.CustomLoginSuccessHandler" />
	<bean id="customLogoutSuccess" class="co.qwan.home.security.CustomLogoutSuccessHandler" />
	<bean id="customPasswordEncoder" class="co.qwan.home.security.CustomPasswordEncoder" />
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<security:http auto-config="true" use-expressions="true">
		<!-- 접근 권한별 url 제한 설정 -->
		<security:intercept-url pattern="/sample/all" access="permitAll" />
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')" />
		<!-- <security:access-denied-handler error-page="/accessError" /> -->
		<security:access-denied-handler ref="customAccessDenied" />
		
		<security:form-login login-page="/customLogin" 
			authentication-success-handler-ref="customLoginSuccess" />
		
		<security:logout logout-url="/customLogout" invalidate-session="true" 
			success-handler-ref="customLogoutSuccess" /> 
			<!--  logout-success-url="/customLogin"  />  -->
		
		<!-- <security:csrf disabled="true"/> -->
		
	</security:http>
	<security:authentication-manager>
		<!-- UserDetailsService 를 이용해 실제 인증과 권한 처리 -->
		<security:authentication-provider>
			<!-- <security:user-service> -->
				<!-- PasswordEncoder 가 필요하지만 {noop} 으로 무시가능 -->
				<!--  <security:user name="member" password="{noop}member" authorities="ROLE_MEMBER" />
				<security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN" /> -->
			<!-- </security:user-service> -->
			<security:jdbc-user-service data-source-ref="dataSource" 
				users-by-username-query="SELECT s_username, s_password, s_enabled FROM student_main WHERE s_username = ? "
				authorities-by-username-query="SELECT username, rolename FROM student_role WHERE username = ? " />
			<security:password-encoder ref="customPasswordEncoder"/>
			
		</security:authentication-provider>
		
	</security:authentication-manager>
</beans>
